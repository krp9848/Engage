{"version":3,"sources":["services/tweets.js","reducers/notificationReducer.js","reducers/tweetReducer.js","components/CreateTweet.js","components/Tweet.js","components/DisplayTweets.js","services/login.js","reducers/loginReducer.js","components/LoginForm/LoginForm.jsx","components/Notification.js","services/users.js","reducers/userReducer.js","components/SignUpForm/SignUpForm.jsx","App.js","store.js","index.js"],"names":["baseUrl","token","tweetService","getAll","a","axios","get","response","data","setToken","newToken","create","newObject","config","headers","Authorization","post","tweetDelete","id","delete","setNotification","messageInfo","ts","dispatch","type","setTimeout","notificationReducer","state","action","console","log","tweetReducer","concat","CreateTweet","useDispatch","useState","text","setText","onSubmit","event","preventDefault","newTweet","message","messageType","createTweet","value","onChange","target","required","Tweet","tweet","DisplayTweets","tweets","useSelector","map","loginService","login","credential","credentials","user","window","localStorage","setItem","JSON","stringify","username","loginReducer","LoginForm","setUsername","password","setPassword","className","placeholder","htmlFor","to","Notification","notification","toast","success","toUpperCase","error","userService","userReducer","SignUpForm","name","setName","confirmPassword","setConfirmPassword","newUser","App","loggedInUser","useEffect","loggedUser","getItem","parse","path","onClick","removeItem","logout","reducer","combineReducers","users","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d22b4494.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/tweets'\n\nlet token = null\n\nconst setToken = (newToken) => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n\n  return response.data\n}\n\nconst tweetDelete = async (id) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.delete(`${baseUrl}/${id}`, config)\n\n  return response.data\n}\n\nconst tweetService = { getAll, setToken, create, tweetDelete }\nexport default tweetService\n","export const setNotification = (messageInfo, ts) => {\n  return async (dispatch) => {\n    dispatch({\n      type: 'SET_MESSAGE',\n      messageInfo,\n    })\n    setTimeout(() => {\n      dispatch({\n        type: 'SET_MESSAGE',\n        messageInfo: null,\n      })\n    }, ts * 1000)\n  }\n}\n\nconst notificationReducer = (state = null, action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n  case 'SET_MESSAGE':\n    return action.messageInfo\n  default:\n    return state\n  }\n}\n\nexport default notificationReducer\n","import tweetService from '../services/tweets'\nimport { setNotification } from './notificationReducer'\n\nexport const initTweets = () => {\n  return async (dispatch) => {\n    const data = await tweetService.getAll()\n    console.log('request all tweets')\n    dispatch({ type: 'INIT_TWEETS', data })\n  }\n}\n\nexport const createTweet = (newTweet) => {\n  return async (dispatch) => {\n    const data = await tweetService.create(newTweet)\n\n    dispatch({\n      type: 'CREATE_TWEET',\n      data,\n    })\n\n    dispatch(\n      setNotification(\n        {\n          message: 'new tweet added',\n          messageType: 'success',\n        },\n        5\n      )\n    )\n  }\n}\n\nconst tweetReducer = (state = [], action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n  case 'INIT_TWEETS':\n    return action.data\n  case 'CREATE_TWEET':\n    return state.concat(action.data)\n  default:\n    return state\n  }\n}\n\nexport default tweetReducer\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { createTweet } from '../reducers/tweetReducer'\n\nconst CreateTweet = () => {\n  const dispatch = useDispatch()\n  const [text, setText] = useState('')\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newTweet = { text }\n    dispatch(createTweet(newTweet))\n    setText('')\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        Tweet Text\n        <input\n          type=\"text\"\n          id=\"tweet-text\"\n          value={text}\n          onChange={({ target }) => setText(target.value)}\n          required\n        />\n      </div>\n      <button id=\"tweet-button\" type=\"submit\">\n        Tweet\n      </button>\n    </form>\n  )\n}\n\nexport default CreateTweet\n","import React from 'react'\n\nconst Tweet = ({ tweet }) => {\n  return <p>{tweet.text}</p>\n}\n\nexport default Tweet\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Tweet from './Tweet'\n\nconst DisplayTweets = () => {\n  const tweets = useSelector((state) => state.tweets)\n\n  return (\n    <div>\n      <h2>All Tweets</h2>\n      {tweets.map((tweet) => (\n        <Tweet key={tweet.id} tweet={tweet} />\n      ))}\n    </div>\n  )\n}\n\nexport default DisplayTweets\n","import axios from 'axios'\n\nconst baseUrl = 'api/login'\n\nconst login = async (credential) => {\n  const response = await axios.post(baseUrl, credential)\n  return response.data\n}\n\nconst loginService = { login }\n\nexport default loginService\n","import tweetService from '../services/tweets'\nimport loginService from '../services/login'\nimport { setNotification } from './notificationReducer'\n\n// check if the user information is present in local storage\nexport const checkLoggedUser = () => {\n  return async (dispatch) => {\n    const loggedUser = window.localStorage.getItem('loggedEngageAppUser')\n    if (loggedUser) {\n      const user = JSON.parse(loggedUser)\n      dispatch({ type: 'SET_USER', user })\n      tweetService.setToken(user.token)\n    }\n  }\n}\n\n// handle login\n\nexport const login = (credentials) => {\n  return async (dispatch) => {\n    try {\n      const user = await loginService.login(credentials)\n      window.localStorage.setItem('loggedEngageAppUser', JSON.stringify(user))\n      tweetService.setToken(user.token)\n      dispatch({ type: 'SET_USER', user })\n      dispatch(\n        setNotification(\n          {\n            message: `${user.username} logged in`,\n            messageType: 'success',\n          },\n          5\n        )\n      )\n    } catch (exception) {\n      dispatch(\n        setNotification(\n          {\n            message: 'wrong username or password',\n            messageType: 'failure',\n          },\n          5\n        )\n      )\n    }\n  }\n}\n\n// handle logout\nexport const logout = (user) => {\n  return async (dispatch) => {\n    dispatch(\n      setNotification(\n        {\n          message: `${user.username} logged out`,\n          messageType: 'success',\n        },\n        5\n      )\n    )\n    dispatch({ type: 'SET_USER', user: null })\n    window.localStorage.removeItem('loggedEngageAppUser')\n  }\n}\n\nconst loginReducer = (state = null, action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n  case 'SET_USER':\n    return action.user\n  case 'REMOVE_USER':\n    return null\n  default:\n    return state\n  }\n}\n\nexport default loginReducer\n","import { React, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { login } from '../../reducers/loginReducer'\nimport './LoginForm.scss'\n\nconst LoginForm = () => {\n  const dispatch = useDispatch()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleLogin = (event) => {\n    event.preventDefault()\n    const credentials = { username, password }\n\n    dispatch(login(credentials))\n\n    setUsername('')\n    setPassword('')\n  }\n  return (\n    <div className=\"loginFormContainer\">\n      <div className=\"loginHeader\">\n        <h1>Log in to Engage</h1>\n      </div>\n      <form className=\"loginForm\" onSubmit={handleLogin}>\n        <div className=\"formGroup\">\n          <input\n            id=\"username\"\n            type=\"text\"\n            placeholder=\"username\"\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n            required\n          />\n          <label htmlFor=\"username\">username</label>\n        </div>\n        <div className=\"formGroup\">\n          <input\n            id=\"password\"\n            type=\"password\"\n            placeholder=\"password\"\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n            required\n          />\n          <label htmlFor=\"password\">password</label>\n        </div>\n        <button id=\"login-button\" type=\"submit\">\n          Login\n        </button>\n      </form>\n      <div className=\"signUpText\">\n        <p>\n          Don&apos;t have an account? Please <Link to=\"/signup\">SignUp</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default LoginForm\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst Notification = () => {\n  const messageInfo = useSelector((state) => state.notification)\n  const notify = () => {\n    if (messageInfo.messageType === 'success') {\n      toast.success(messageInfo.message.toUpperCase())\n    } else {\n      toast.error(messageInfo.message.toUpperCase())\n    }\n  }\n\n  if (!messageInfo) return null\n\n  notify()\n\n  return <ToastContainer />\n}\n\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/users'\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const response = await axios.post(baseUrl, newObject)\n  return response.data\n}\n\nconst userService = { getAll, create }\nexport default userService\n","import userService from '../services/users'\nimport { login } from './loginReducer'\nimport { setNotification } from './notificationReducer'\n\nexport const createUser = (newUser) => {\n  return async (dispatch) => {\n    try {\n      const user = await userService.create(newUser)\n      dispatch(login({ username: user.username, password: newUser.password }))\n    } catch (error) {\n      dispatch(\n        setNotification(\n          {\n            message: `${error.response.data.error}`,\n            messageType: 'failure',\n          },\n          5\n        )\n      )\n    }\n  }\n}\n\nconst userReducer = (state = [], action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n  default:\n    return state\n  }\n}\n\nexport default userReducer\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { setNotification } from '../../reducers/notificationReducer'\nimport { createUser } from '../../reducers/userReducer'\nimport './SignUpForm.scss'\nconst SignUpForm = () => {\n  const dispatch = useDispatch()\n  const [name, setName] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n\n  const handleLogin = (event) => {\n    event.preventDefault()\n    if (password !== confirmPassword) {\n      dispatch(\n        setNotification(\n          { message: 'Password do not match', messageType: 'failure' },\n          5\n        )\n      )\n      return\n    }\n\n    dispatch(createUser({ username, password, name }))\n  }\n  return (\n    <div className=\"signUpFormContainer\">\n      <div className=\"signUpHeader\">\n        <h1>Sign up on Engage</h1>\n      </div>\n      <form className=\"signUpForm\" onSubmit={handleLogin}>\n        <div className=\"formGroup\">\n          <input\n            id=\"signup-name\"\n            type=\"text\"\n            placeholder=\"Name\"\n            value={name}\n            onChange={({ target }) => setName(target.value)}\n            required\n          />\n          <label htmlFor=\"signup-name\">Name</label>\n        </div>\n        <div className=\"formGroup\">\n          <input\n            id=\"signup-username\"\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n            required\n          />\n          <label htmlFor=\"signup-username\">Username</label>\n        </div>\n        <div className=\"formGroup\">\n          <input\n            id=\"signup-password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n            required\n          />\n          <label htmlFor=\"signup-password\">Password</label>\n        </div>\n        <div className=\"formGroup\">\n          <input\n            id=\"signup-confirm_password\"\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            value={confirmPassword}\n            onChange={({ target }) => setConfirmPassword(target.value)}\n            required\n          />\n          <label htmlFor=\"signup-confirm_password\">Confirm Password</label>\n        </div>\n        <button id=\"signup-button\" type=\"submit\">\n          Sign Up\n        </button>\n      </form>\n      <div className=\"logInText\">\n        <p>\n          Already have an account? Please <Link to=\"/\">LogIn</Link>\n        </p>\n      </div>\n    </div>\n  )\n}\nexport default SignUpForm\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport CreateTweet from './components/CreateTweet'\nimport DisplayTweets from './components/DisplayTweets'\nimport LoginForm from './components/LoginForm/LoginForm'\nimport Notification from './components/Notification'\nimport SignUpForm from './components/SignUpForm/SignUpForm'\nimport { checkLoggedUser, logout } from './reducers/loginReducer'\nimport { initTweets } from './reducers/tweetReducer'\n\nfunction App() {\n  const user = useSelector((state) => state.loggedInUser)\n  const dispatch = useDispatch()\n  // load all the tweets\n  useEffect(() => {\n    dispatch(initTweets())\n  }, [dispatch])\n\n  // check it the user information is present in localStorage\n  useEffect(() => {\n    dispatch(checkLoggedUser())\n  }, [dispatch])\n\n  return (\n    <div className=\"App\">\n      <Notification />\n      <Switch>\n        <Route path=\"/signup\">\n          {user === null ? <SignUpForm /> : <Redirect to=\"/\" />}\n        </Route>\n        <Route path=\"/\">\n          {user === null ? (\n            <LoginForm />\n          ) : (\n            <>\n              <p>\n                {' '}\n                {user.username} logged in\n                <button onClick={() => dispatch(logout(user))}>logout</button>\n              </p>\n              <CreateTweet />\n              <DisplayTweets />\n            </>\n          )}\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default App\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport loginReducer from './reducers/loginReducer'\nimport notificationReducer from './reducers/notificationReducer'\nimport tweetReducer from './reducers/tweetReducer'\nimport userReducer from './reducers/userReducer'\n\nconst reducer = combineReducers({\n  notification: notificationReducer,\n  users: userReducer,\n  tweets: tweetReducer,\n  loggedInUser: loginReducer,\n})\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n\n  document.getElementById('root')\n)\n"],"sourceRoot":""}