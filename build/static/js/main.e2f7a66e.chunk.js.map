{"version":3,"sources":["services/tweets.js","reducers/tweetReducer.js","components/CreateTweet.js","components/Tweet.js","components/DisplayTweets.js","services/login.js","reducers/notificationReducer.js","reducers/loginReducer.js","components/LoginForm.js","components/Notification.js","services/users.js","reducers/userReducer.js","components/SignUpForm.js","App.js","store.js","index.js"],"names":["baseUrl","token","tweetService","getAll","a","axios","get","response","data","setToken","newToken","create","newObject","config","headers","Authorization","post","tweetDelete","id","delete","tweetReducer","state","action","console","log","type","concat","CreateTweet","dispatch","useDispatch","useState","text","setText","onSubmit","event","preventDefault","newTweet","createTweet","value","onChange","target","required","Tweet","tweet","DisplayTweets","tweets","useSelector","map","loginService","login","credential","setNotification","messageInfo","ts","setTimeout","notificationReducer","credentials","user","window","localStorage","setItem","JSON","stringify","message","username","messageType","loginReducer","LoginForm","setUsername","password","setPassword","Notification","notification","className","join","userService","userReducer","SignUpForm","name","setName","confirmPassword","setConfirmPassword","newUser","error","App","loggedInUser","useEffect","loggedUser","getItem","parse","path","to","onClick","removeItem","logout","reducer","combineReducers","users","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2f7a66e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/tweets'\n\nlet token = null\n\nconst setToken = (newToken) => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n\n  return response.data\n}\n\nconst tweetDelete = async (id) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.delete(`${baseUrl}/${id}`, config)\n\n  return response.data\n}\n\nconst tweetService = { getAll, setToken, create, tweetDelete }\nexport default tweetService\n","import tweetService from '../services/tweets'\n\nexport const initTweets = () => {\n  return async (dispatch) => {\n    const data = await tweetService.getAll()\n    console.log('request all tweets')\n    dispatch({ type: 'INIT_TWEETS', data })\n  }\n}\n\nexport const createTweet = (newTweet) => {\n  return async (dispatch) => {\n    const data = await tweetService.create(newTweet)\n\n    dispatch({\n      type: 'CREATE_TWEET',\n      data,\n    })\n  }\n}\n\nconst tweetReducer = (state = [], action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n    case 'INIT_TWEETS':\n      return action.data\n    case 'CREATE_TWEET':\n      return state.concat(action.data)\n    default:\n      return state\n  }\n}\n\nexport default tweetReducer\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { createTweet } from '../reducers/tweetReducer'\n\nconst CreateTweet = () => {\n  const dispatch = useDispatch()\n  const [text, setText] = useState('')\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newTweet = { text }\n    dispatch(createTweet(newTweet))\n    setText('')\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        Tweet Text\n        <input\n          type=\"text\"\n          id=\"tweet-text\"\n          value={text}\n          onChange={({ target }) => setText(target.value)}\n          required\n        />\n      </div>\n      <button type=\"submit\">Tweet</button>\n    </form>\n  )\n}\n\nexport default CreateTweet\n","import React from 'react'\n\nconst Tweet = ({ tweet }) => {\n  return <p>{tweet.text}</p>\n}\n\nexport default Tweet\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Tweet from './Tweet'\n\nconst DisplayTweets = () => {\n  const tweets = useSelector((state) => state.tweets)\n\n  return (\n    <div>\n      <h2>All Tweets</h2>\n      {tweets.map((tweet) => (\n        <Tweet key={tweet.id} tweet={tweet} />\n      ))}\n    </div>\n  )\n}\n\nexport default DisplayTweets\n","import axios from 'axios'\n\nconst baseUrl = 'api/login'\n\nconst login = async (credential) => {\n  const response = await axios.post(baseUrl, credential)\n  return response.data\n}\n\nconst loginService = { login }\n\nexport default loginService\n","export const setNotification = (messageInfo, ts) => {\n  return async (dispatch) => {\n    dispatch({\n      type: 'SET_MESSAGE',\n      messageInfo,\n    })\n    setTimeout(() => {\n      dispatch({\n        type: 'SET_MESSAGE',\n        messageInfo: null,\n      })\n    }, ts * 1000)\n  }\n}\n\nconst notificationReducer = (state = null, action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n    case 'SET_MESSAGE':\n      return action.messageInfo\n    default:\n      return state\n  }\n}\n\nexport default notificationReducer\n","import tweetService from '../services/tweets'\nimport loginService from '../services/login'\nimport { setNotification } from './notificationReducer'\n\n// check if the user information is present in local storage\nexport const checkLoggedUser = () => {\n  return async (dispatch) => {\n    const loggedUser = window.localStorage.getItem('loggedBlogAppUser')\n    if (loggedUser) {\n      const user = JSON.parse(loggedUser)\n      dispatch({ type: 'SET_USER', user })\n      tweetService.setToken(user.token)\n    }\n  }\n}\n\n// handle login\n\nexport const login = (credentials) => {\n  return async (dispatch) => {\n    try {\n      const user = await loginService.login(credentials)\n      window.localStorage.setItem('loggedBlogAppUser', JSON.stringify(user))\n      tweetService.setToken(user.token)\n      dispatch({ type: 'SET_USER', user })\n      dispatch(\n        setNotification(\n          {\n            message: `${user.username} logged in`,\n            messageType: 'success',\n          },\n          5\n        )\n      )\n    } catch (exception) {\n      dispatch(\n        setNotification(\n          {\n            message: `wrong username or password`,\n            messageType: 'failure',\n          },\n          5\n        )\n      )\n    }\n  }\n}\n\n// handle logout\nexport const logout = (user) => {\n  return async (dispatch) => {\n    dispatch(\n      setNotification(\n        {\n          message: `${user.username} logged out`,\n          messageType: 'success',\n        },\n        5\n      )\n    )\n    dispatch({ type: 'SET_USER', user: null })\n    window.localStorage.removeItem('loggedBlogAppUser')\n  }\n}\n\nconst loginReducer = (state = null, action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n    case 'SET_USER':\n      return action.user\n    case 'REMOVE_USER':\n      return null\n    default:\n      return state\n  }\n}\n\nexport default loginReducer\n","import { React, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { login } from '../reducers/loginReducer'\n\nconst LoginForm = () => {\n  const dispatch = useDispatch()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleLogin = (event) => {\n    event.preventDefault()\n    const credentials = { username, password }\n\n    dispatch(login(credentials))\n\n    setUsername('')\n    setPassword('')\n  }\n  return (\n    <form onSubmit={handleLogin}>\n      <div>\n        Username{' '}\n        <input\n          id=\"username\"\n          type=\"text\"\n          value={username}\n          onChange={({ target }) => setUsername(target.value)}\n          required\n        />\n      </div>\n      <div>\n        Password{' '}\n        <input\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={({ target }) => setPassword(target.value)}\n          required\n        />\n      </div>\n      <button id=\"login-button\" type=\"submit\">\n        Login\n      </button>\n    </form>\n  )\n}\n\nexport default LoginForm\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst Notification = () => {\n  const messageInfo = useSelector((state) => state.notification)\n\n  if (!messageInfo) return null\n\n  return (\n    <h2\n      className={[\n        'info',\n        messageInfo.messageType === 'success' ? 'success' : 'failure',\n      ].join(' ')}\n    >\n      {messageInfo.message}\n    </h2>\n  )\n}\n\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/users'\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const response = await axios.post(baseUrl, newObject)\n  return response.data\n}\n\nconst userService = { getAll, create }\nexport default userService\n","import userService from '../services/users'\nimport { login } from './loginReducer'\nimport { setNotification } from './notificationReducer'\n\nexport const createUser = (newUser) => {\n  return async (dispatch) => {\n    try {\n      const user = await userService.create(newUser)\n      dispatch(login({ username: user.username, password: newUser.password }))\n    } catch (error) {\n      dispatch(\n        setNotification(\n          {\n            message: `${error.response.data.error}`,\n            messageType: `failure`,\n          },\n          5\n        )\n      )\n    }\n  }\n}\n\nconst userReducer = (state = [], action) => {\n  console.log('state now', state)\n  console.log('action', action)\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n\nexport default userReducer\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setNotification } from '../reducers/notificationReducer'\nimport { createUser } from '../reducers/userReducer'\n\nconst SignUpForm = () => {\n  const dispatch = useDispatch()\n  const [name, setName] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n\n  const handleLogin = (event) => {\n    event.preventDefault()\n    if (password !== confirmPassword) {\n      dispatch(\n        setNotification(\n          { message: 'Password do not match', messageType: 'failure' },\n          5\n        )\n      )\n      return\n    }\n\n    dispatch(createUser({ username, password, name }))\n  }\n  return (\n    <form onSubmit={handleLogin}>\n      <div>\n        Name{' '}\n        <input\n          id=\"signup-name\"\n          type=\"text\"\n          value={name}\n          onChange={({ target }) => setName(target.value)}\n          required\n        />\n      </div>\n      <div>\n        Username{' '}\n        <input\n          id=\"signup-username\"\n          type=\"text\"\n          value={username}\n          onChange={({ target }) => setUsername(target.value)}\n          required\n        />\n      </div>\n      <div>\n        Password{' '}\n        <input\n          id=\"signup-password\"\n          type=\"password\"\n          value={password}\n          onChange={({ target }) => setPassword(target.value)}\n          required\n        />\n      </div>\n      <div>\n        Confirm Password{' '}\n        <input\n          id=\"signup-confirm_password\"\n          type=\"password\"\n          value={confirmPassword}\n          onChange={({ target }) => setConfirmPassword(target.value)}\n          required\n        />\n      </div>\n      <button id=\"signup-button\" type=\"submit\">\n        Sign Up\n      </button>\n    </form>\n  )\n}\nexport default SignUpForm\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link, Redirect, Route, Switch } from 'react-router-dom'\nimport CreateTweet from './components/CreateTweet'\nimport DisplayTweets from './components/DisplayTweets'\nimport LoginForm from './components/LoginForm'\nimport Notification from './components/Notification'\nimport SignUpForm from './components/SignUpForm'\nimport { checkLoggedUser, logout } from './reducers/loginReducer'\nimport { initTweets } from './reducers/tweetReducer'\n\nfunction App() {\n  const user = useSelector((state) => state.loggedInUser)\n  const dispatch = useDispatch()\n  // load all the tweets\n  useEffect(() => {\n    dispatch(initTweets())\n  }, [dispatch])\n\n  // check it the user information is present in localStorage\n  useEffect(() => {\n    dispatch(checkLoggedUser())\n  }, [dispatch])\n\n  return (\n    <div className=\"App\">\n      <h1>\n        <i>Engage</i>\n      </h1>\n      <Notification />\n      <Switch>\n        <Route path=\"/signup\">\n          {user === null ? <SignUpForm /> : <Redirect to=\"/\" />}\n        </Route>\n        <Route path=\"/\">\n          {user === null ? (\n            <div>\n              <LoginForm />\n              <p>\n                Don't have an account? Please <Link to=\"/signup\">SignUp</Link>\n              </p>\n            </div>\n          ) : (\n            <>\n              <p>\n                {' '}\n                {user.username} logged in\n                <button onClick={() => dispatch(logout(user))}>logout</button>\n              </p>\n              <CreateTweet />\n              <DisplayTweets />\n            </>\n          )}\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default App\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport loginReducer from './reducers/loginReducer'\nimport notificationReducer from './reducers/notificationReducer'\nimport tweetReducer from './reducers/tweetReducer'\nimport userReducer from './reducers/userReducer'\n\nconst reducer = combineReducers({\n  notification: notificationReducer,\n  users: userReducer,\n  tweets: tweetReducer,\n  loggedInUser: loginReducer,\n})\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n\n  document.getElementById('root')\n)\n"],"sourceRoot":""}